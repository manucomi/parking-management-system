/*
  This script uses a shared library called jenkinsfile-core.
  Documentation: https://git.harvardbusiness.org/HBPTech/jenkinsfile-core/tree/master
 */
@Library('hbsp-core') _

import groovy.json.JsonSlurper
import java.text.SimpleDateFormat
import java.util.Date
import java.util.TimeZone
import java.util.Calendar

def whenUnlocked(resourceName, closure) {
    def locked = true
    def timeoutMinutes = 30
    timeout(time: timeoutMinutes, unit: 'MINUTES') {
        lock(resource: resourceName, inversePrecedence: true) {
            locked = false
        }
    }
    if (!locked) {
        closure.call()
    } else {
        error "Could not acquire lock for ${resourceName}. Timed out after ${timeoutMinutes} minutes."
    }
}

tmpDir = '.tmp'

def chromaticResourceName = 'chromatic-mfe-error-pages'
def mainBranchChromaticResourceName = "${chromaticResourceName}-main"

pipeline {
    agent {
        docker {
            image 'hbrg/mfe-jenkins-core:latest'
            args '-v $HOME/.ssh:/home/jenkins/.ssh -v $HOME/.aws:/root/.aws -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/jenkins/tools:/var/lib/jenkins/tools -u jenkins:docker --shm-size=2g'
        }
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: "5"))
        lock(resource: "${chromaticResourceName}-${BRANCH_NAME}", inversePrecedence: true)
    }

    environment {
        HOME = "."
        appIdentifier = 'mfe-error-pages'
        GH_HOST = "git.harvardbusiness.org"
        CHROMATIC_TOKEN = credentials('Chromatic-CLI-mfe-error-pages')
        NPM_INSTALL_CONFIG_ID = 'c0ffd55b-8a4f-4403-870e-1eebbb2a4713'
        NEXUS_CRED_ID = 'nexus-pro-npm-token'
        ACTION_QA1_S3_UPLOAD = false
        ACTION_QA2_S3_UPLOAD = false
    }

    stages {
        stage('Job Actions') {
            when {
                expression {
                    return isMainBranch() || isMainPullRequest()
                }
            }

            stages {
                stage('Pull Request') {
                    when {
                        expression {
                            return isMainPullRequest()
                        }
                    }

                    steps {
                        script {
                            def CHANGE_ACTION_DEFAULT = 'None'
                            def CHANGE_ACTION_QA1_S3 = 'Deploy to QA1 S3'
                            def CHANGE_ACTION_QA2_S3 = 'Deploy to QA2 S3'
                            def changeAction = CHANGE_ACTION_DEFAULT

                            catchError(stageResult: 'FAILURE') {
                                try {
                                    timeout(time: 1, unit: 'MINUTES') {
                                        changeAction = input (
                                            id: 'changeActionInput',
                                            message: 'Which action would you like to perform on this job?',
                                            parameters: [
                                                choice(
                                                    name: 'CHANGE_ACTIONS',
                                                    choices: [
                                                        CHANGE_ACTION_DEFAULT,
                                                        CHANGE_ACTION_QA1_S3,
                                                        CHANGE_ACTION_QA2_S3
                                                    ],
                                                    description: """\
                                                        If you don't want to perform an action or are unsure what to do,
                                                        choose \"${CHANGE_ACTION_DEFAULT}\" or click abort. Reach out to
                                                        someone for guidance if needed.
                                                    """.stripIndent()
                                                ),
                                            ],
                                        )
                                    }

                                    if (changeAction == CHANGE_ACTION_QA1_S3) {
                                        ACTION_QA1_S3_UPLOAD = true
                                    } else if (changeAction == CHANGE_ACTION_QA2_S3) {
                                        ACTION_QA2_S3_UPLOAD = true
                                    }
                                } catch (err) {
                                    echo err.toString()
                                } finally {
                                    echo "Performing action: ${changeAction}"
                                }
                            }
                        }
                    }
                }

                stage('main Branch') {
                    when {
                        expression {
                            return isMainBranch()
                        }
                    }

                    steps {
                        script {
                            def MAIN_ROLLBACK_DEFAULT = ''

                            try {
                                timeout(time: 1, unit: 'MINUTES') {
                                    mainRollback = input(
                                        id: 'mainRollbackInput',
                                        message: 'To rollback to a previous version, enter the backup timestamp (YYYYMMDD-HHMMSS)',
                                        parameters: [
                                            string(
                                                name: 'ROLLBACK_VERSION',
                                                defaultValue: MAIN_ROLLBACK_DEFAULT,
                                                description: "Enter the backup timestamp to rollback to (format: YYYYMMDD-HHMMSS). Find backups in s3://hbrg-prod/resources/html/error/backup/"
                                            ),
                                        ],
                                    )
                                }

                                if (mainRollback != MAIN_ROLLBACK_DEFAULT) {
                                    env.ROLLBACK_PATH = "s3://hbrg-prod/resources/html/error/backup/${mainRollback}"
                                    env.ACTION_ROLLBACK = true
                                }
                            } catch (err) {
                                echo err.toString()
                            }
                        }
                    }
                }
            }
        }

        stage('Install Dependencies') {
            when {
                expression {
                    return !isRollback()
                }
            }

            steps {
                script {
                    withCredentials([string(credentialsId: NEXUS_CRED_ID, variable: 'NPM_TOKEN')]) {
                        withNPM(npmrcConfig: NPM_INSTALL_CONFIG_ID) {
                            sh "npm ci"
                        }
                    }
                }
            }
        }

        stage('Attempting Version Bump') {
            when {
                expression {
                    return isMainBranch() && !isRollback()
                }
            }

            steps {
                sshagent(['jenkins-git']) {
                    script {
                        sh 'git fetch'
                        sh 'git checkout -b main origin/main'
                        sh 'git reset --hard HEAD'
                        sh 'git diff --exit-code'
                        withCredentials([string(credentialsId: NEXUS_CRED_ID, variable: 'NPM_TOKEN')]) {
                            withNPM(npmrcConfig: NPM_INSTALL_CONFIG_ID) {
                                sh 'npx @changesets/cli version'
                                sh 'git restore --source=HEAD -- .npmrc'
                            }
                        }

                        if (doesGitTagExist("v${getPackageVersion()}")) {
                            sh 'git commit -am "removing empty changeset" --no-verify'
                            sh 'git push --no-verify'
                        } else {
                            sh "git commit -am 'bumping version to ${getPackageVersion()}' --no-verify"
                            env.IS_PROD_RELEASE = true
                        }
                    }
                }
            }
        }

        stage('Build') {
            when {
                expression {
                    return !isRollback()
                }
            }

            steps {
                script {
                    if (ACTION_QA1_S3_UPLOAD.toBoolean() || ACTION_QA2_S3_UPLOAD.toBoolean()) {
                        sh "NEXT_PUBLIC_API_ORIGIN=https://platform.qa.hbr.org npm run build"
                    } else {
                        sh "npm run build"
                    }
                }
            }
        }

        stage('Tests & Checks') {
            when {
                expression {
                    return !isRollback()
                }
            }

            parallel {
                stage("Checkmarx Security Scan") {
                    steps {
                        script {
                            sh """
                                sudo mkdir -p /apps /home/jenkins
                                sudo chown -R jenkins:jenkins /apps /home/jenkins
                            """
                            checkmarx.scan(
                                appIdentifier,
                                 env.BRANCH_NAME,
                                "HBR",
                                "!.cache,!.node_modules,!.tmp,!.jsdoc,!.husky,!test-helpers,!__mocks__,!docs,!.npm,!.editorconfig,!.eslint*,!.gitignore,!.jsdoc.json,!.*rc,!.stylelint*,!Jenkinsfile,!package*.json,!*.config.js,!*.md,!*.test.js,!*.test.jsx,!.git/**/*,!*.jpg,!*.png,!Checkmarx/Reports/*.*",
                                10
                            )
                        }
                    }
                }

                stage('Check Changeset') {
                    when {
                        expression {
                            return isMainPullRequest()
                        }
                    }

                    steps {
                        script {
                            withCredentials([string(credentialsId: 'git-hbrjenkins-itops', variable: 'GITHUB_TOKEN')]) {
                                sshagent(['jenkins-git']) {
                                    script {
                                        sh 'git fetch origin main:main'
                                    }
                                }
                            }

                            try {
                                withCredentials([string(credentialsId: NEXUS_CRED_ID, variable: 'NPM_TOKEN')]) {
                                    withNPM(npmrcConfig: NPM_INSTALL_CONFIG_ID) {
                                        sh 'npx @changesets/cli status'
                                    }
                                }
                            } catch (Exception err) {
                                prComment("""\
                                    **Changeset Missing**
                                    Changeset is either missing or incorrect.
                                    Jenkins: [Build #${env.BUILD_NUMBER}](${env.BUILD_URL})
                                """.stripIndent())
                                throw err
                            }
                        }
                    }
                }

                stage('Unit Tests') {
                    steps {
                        sh "npm test"
                    }
                }

                stage('Code Style Scan') {
                    steps {
                        sh "npm run lint"
                    }
                }

                stage('Chromatic Visual Diff') {
                    when {
                        expression {
                            isMainPullRequest()
                        }
                    }

                    steps {
                        script {
                            whenUnlocked("${mainBranchChromaticResourceName}") {
                                def logFile = "${tmpDir}/chromatic.log"
                                def errFile = "${tmpDir}/chromatic_err.log"
                                catchError(stageResult: 'FAILURE') {
                                    sh "mkdir -p ${tmpDir}"
                                    withCredentials([string(credentialsId: NEXUS_CRED_ID, variable: 'NPM_TOKEN')]) {
                                        withNPM(npmrcConfig: NPM_INSTALL_CONFIG_ID) {
                                            sh 'npx chromatic@11.27.0 --project-token=$CHROMATIC_TOKEN --ci --only-changed > ' + logFile + ' 2> ' + errFile
                                        }
                                    }
                                }
                                try {
                                    def stdout = readFile logFile
                                    echo "${stdout}"
                                    def chromaticUrl = stdout.find(/https:\/\/www\.chromatic\.com\/build\?appId=[a-z0-9]+&number=\d+/)
                                    if (chromaticUrl) {
                                        def stderr = readFile errFile
                                        echo "${stderr}"
                                        def changes = '0'
                                        if (stderr) {
                                            stderr.find(/Found (\d+)/) { match -> changes = match[1] }
                                        }
                                        if (changes != '0') {
                                            prComment("""\
                                                **Published to Chromatic**
                                                Visual Changes: ${changes}
                                                Chromatic: [Build #${chromaticUrl.split('number=')[1]}](${chromaticUrl})
                                                Jenkins: [Build #${env.BUILD_NUMBER}](${env.BUILD_URL})
                                            """.stripIndent())
                                        }
                                    } else {
                                        echo "Couldn't find a Chromatic build URL."
                                    }
                                } catch (err) {
                                    echo "Something went wrong getting the Chromatic build URL."
                                    echo "${err}"
                                }
                            }
                        }
                    }
                }

                stage("a11y Tests") {
                    steps {
                        script {
                            sh "npm run test-storybook"
                        }
                    }
                }
            }            
        }

        stage('Create GitHub Release') {
            when {
                expression {
                    return isProdBuild()
                }
            }

            steps {
                withCredentials([string(credentialsId: 'git-hbrjenkins-itops', variable: 'GITHUB_ENTERPRISE_TOKEN')]) {
                    sshagent(['jenkins-git']) {
                        script {
                            sh 'git reset --hard HEAD'
                            sh "git tag v${getPackageVersion()}"
                            sh 'git push --no-verify'
                            sh 'git push --tags --no-verify'
                            withCredentials([string(credentialsId: NEXUS_CRED_ID, variable: 'NPM_TOKEN')]) {
                                withNPM(npmrcConfig: NPM_INSTALL_CONFIG_ID) {
                                    def packageVersion = getPackageVersion()
                                    sh "gh release create 'v${packageVersion}' --title 'Release ${packageVersion}' --generate-notes"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Update Chromatic Baseline') {
            when {
                expression {
                    return isMainBranch()
                }
            }

            steps {
                withCredentials([string(credentialsId: NEXUS_CRED_ID, variable: 'NPM_TOKEN')]) {
                    withNPM(npmrcConfig: NPM_INSTALL_CONFIG_ID) {
                        sh 'npx chromatic@11.27.0 --project-token=${CHROMATIC_TOKEN} --ci --only-changed --auto-accept-changes'
                    }
                }
            }
        }

        stage('Deploy to QA2 S3') {
            when {
                expression { return ACTION_QA2_S3_UPLOAD.toBoolean() }
            }

            stages {
                stage('Deploy') {
                    steps {
                        script {
                            echo 'Deploying error pages to QA2...'
                            try {
                                s3Deploy(
                                    "dist",
                                    "s3://hbrg-qa2/resources/html/error"
                                )

                                prComment("""\
                                    The static error pages were deployed to QA2.

                                    You can preview the pages at:
                                    • [404 Not Found](https://www2.qa.hbr.org/resources/html/error/404.html)
                                    • [500 Server Error](https://www2.qa.hbr.org/resources/html/error/500.html)
                                    • [Maintenance](https://www2.qa.hbr.org/resources/html/error/maintenance.html)
                                    """.stripIndent())

                            } catch (Exception err) {
                                echo "Deployment to QA2 failed: ${err.message}"
                                throw err
                            }
                        }
                    }
                }

                stage('LHCI Scan') {
                    steps {
                        executeLHCIScans('qa2')
                    }                    
                }
            }
        }

        stage('Deploy to QA1 S3') {
            when {
                expression { return ACTION_QA1_S3_UPLOAD.toBoolean() }
            }

            stages {
                stage('Deploy') {
                    steps {
                        script {
                            echo 'Deploying error pages to QA1...'
                            try {
                                s3Deploy(
                                    "dist",
                                    "s3://hbrg-qa1/resources/html/error"
                                )
                            } catch (Exception err) {
                                echo "Deployment to QA1 failed: ${err.message}"
                                throw err
                            }
                        }
                    }
                }

                stage('LHCI Scan') {
                    steps {
                        executeLHCIScans('qa1')
                    }
                }
            }
        }

        stage('Deploy to Prod') {
            when {
                expression {
                    return isRollback() || isProdBuild()
                }
            }

            stages {
                stage('Backup S3 files') {
                    when {
                        expression {
                            return isProdBuild()
                        }
                    }

                    steps {
                        script {
                            try {
                                env.BACKUP_PATH = createS3Backup()
                                def hasBackup = verifyS3Backup(env.BACKUP_PATH)

                                if (!hasBackup) {
                                    echo "No files to back up, continuing with deploy"
                                } else {
                                    echo "Backup created at ${env.BACKUP_PATH}"
                                }
                            } catch (Exception err) {
                                error "Failed to create backup: ${err.message}"
                            }
                        }
                    }
                }

                stage('Deploy') {
                    when {
                        expression {
                            return isRollback() || isProdBuild()
                        }
                    }

                    steps {
                        script {
                            if (isRollback()) {
                                echo "Rolling back to version from ${env.ROLLBACK_PATH}"
                            
                                // Verify rollback version exists
                                if (!verifyS3Backup(env.ROLLBACK_PATH)) {
                                    error "Rollback version not found at ${env.ROLLBACK_PATH}"
                                }

                                // Create backup of current version before rollback
                                env.BACKUP_PATH = createS3Backup()
                                
                                // Perform rollback
                                s3Rollback("${env.ROLLBACK_PATH}/", "s3://hbrg-prod/resources/html/error/")
                                
                                echo """\
                                    Successfully rolled back to version from ${env.ROLLBACK_PATH.split('/')[-1]}
                                    """.stripIndent()
                            } else if (ACTION_QA2_S3_UPLOAD.toBoolean()) {
                                s3Deploy(
                                    "dist",
                                    "s3://hbrg-prod/resources/html/error"
                                )
                            }

                        }
                    }
                }

                stage('Post Deployment') {
                    when {
                        expression {
                            return isProdBuild()
                        }
                    }

                    parallel {
                        stage('LHCI Scan') {
                            steps {
                                executeLHCIScans('prod')
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs(notFailBuild: true)
        }
    }
}

def prComment(message) {
    withCredentials([string(credentialsId: "git-hbrjenkins-itops", variable: "GH_ENTERPRISE_TOKEN")]) {
        def now = new Date()
        sh "mkdir -p ${tmpDir}"
        def prCommentFile = "${tmpDir}/pr-comment-${now.getTime()}"
        sh "echo '${message}' > ${prCommentFile}"
        catchError(stageResult: 'UNSTABLE') {
            sh "gh pr comment ${env.CHANGE_ID} --body-file '${prCommentFile}'"
        }
    }
}

def isMainBranch() {
    return env.BRANCH_NAME == 'main'
}

def isMainPullRequest() {
    return env.CHANGE_TARGET == "main"
}

def isProdBuild() {
    return !!env.IS_PROD_RELEASE
}

def getPackageVersion() {
    try {
        return sh(script: "npm pkg get version | sed 's/\"//g'", returnStdout: true).trim()
    } catch (error) {
        println "Could not get package version from the root package.json"
        throw error
    }
}

def doesGitTagExist(gitTag) {
    def tag
    sshagent(["jenkins-git"]) {
        tag = sh(script: "git ls-remote --tags origin ${gitTag}" , returnStdout: true)
        echo "${tag}"
    }
    return !!tag
}

def isRollback() {
    return env.ACTION_ROLLBACK?.toBoolean()
}

def s3Backup(String sourcePath, String backupPath) {
    echo "Creating backup from ${sourcePath} to ${backupPath}"
    sh """
        aws s3 sync ${sourcePath} ${backupPath} \
        --delete
    """
}

def s3Deploy(String sourcePath, String targetPath, String include = "*", String exclude = "") {
    echo "Deploying from ${sourcePath} to ${targetPath}"
    
    def filterArgs = ""
    if (include != "*" || exclude != "") {
        // exclude everything, then selectively include
        filterArgs = "--exclude \"*\""
        if (include) {
            filterArgs += " --include \"${include}\""
        }
    }

    sh """
        aws s3 sync ${sourcePath} ${targetPath} \
        ${filterArgs} \
        --delete
    """
}

def s3Rollback(String backupPath, String targetPath) {
    echo "Rolling back from ${backupPath} to ${targetPath}"
    sh """
        aws s3 sync ${backupPath} ${targetPath} \
        --delete
    """
}

def createS3Backup() {
    def timestamp = new Date().format('yyyyMMdd-HHmmss')
    def backupRoot = "s3://hbrg-prod/resources/html/error/backup/${timestamp}"
    
    // Backup HTML files
    s3Backup(
        "s3://hbrg-prod/resources/html/error/",
        "${backupRoot}/"
    )
    
    return backupRoot
}

def verifyS3Backup(String backupPath) {
    def result = sh(
        script: "aws s3 ls ${backupPath} --recursive | wc -l",
        returnStdout: true
    ).trim().toInteger()

    if (result < 1) {
        echo "Backup skipped: No files found in ${backupPath}"
        return false
    }

    echo "Backup verified: Found ${result} files in ${backupPath}"
    return true
}

def executeLHCIScans(String environment) {
    script {
        withCredentials([string(credentialsId: NEXUS_CRED_ID, variable: 'NPM_TOKEN')]) {
            withNPM(npmrcConfig: NPM_INSTALL_CONFIG_ID) {
                def configScript = ''

                switch(environment) {
                    case 'qa1':
                        configScript = 'npx lhci-config-generator -c ./.lighthouse/lighthouse.config.qa1.js'
                        break
                    case 'qa2':
                        configScript = 'npx lhci-config-generator -c ./.lighthouse/lighthouse.config.qa2.js'
                        break
                    case 'prod':
                        configScript = 'npx lhci-config-generator -c ./.lighthouse/lighthouse.config.prod.js'
                        break
                    default:
                        error("Unknown environment: ${environment}")
                }

                // Generate the configuration JSON
                def configJson = sh(
                    script: configScript,
                    returnStdout: true
                ).trim()
                echo "Generated Lighthouse CI configuration for ${environment}: ${configJson}"

                // Trigger the centralized Lighthouse CI pipeline
                build job: 'SENG/lighthouse-ci-runner/main', parameters: [
                    text(name: 'CONFIG_JSON', value: configJson)
                ]
            }
        }
    }
}