name: Backend CI/CD Pipeline

permissions:
    contents: write
    pull-requests: write

on:
    pull_request:
        branches: [main]
        paths:
            - 'apps/backend/**'
            - '.github/workflows/backend-ci.yml'
            - '.changeset/**'
            - 'package.json'
            - 'turbo.json'

    push:
        branches: [main]
        paths:
            - 'apps/backend/**'
            - '.github/workflows/backend-ci.yml'
            - '.changeset/**'
            - 'package.json'
            - 'turbo.json'

jobs:
    changeset_check:
        name: Check Changeset (PR only)
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Check for changeset
              run: |
                  if [ -z "$(ls -A .changeset/*.md 2>/dev/null | grep -v README)" ]; then
                    echo "No changeset found."
                    echo "Please run 'npm run change:add' to create a changeset."
                    exit 1
                  else
                    echo "Changeset found."
                  fi

    backend_ci:
        name: Validate Backend (Lint + Build)
        runs-on: ubuntu-latest
        needs: changeset_check
        if: |
            always() && 
            (needs.changeset_check.result == 'success' || 
             needs.changeset_check.result == 'skipped')

        defaults:
            run:
                working-directory: apps/backend

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'

            - name: Install root dependencies
              run: npm ci
              working-directory: .

            - name: Install backend dependencies
              run: npm ci

            - name: Run Linter
              run: npm run lint

    release:
        name: Version Bump & Release Notes
        needs: backend_ci
        runs-on: ubuntu-latest
        if: |
            always() && 
            needs.backend_ci.result == 'success' && 
            github.event_name == 'push' && 
            github.ref == 'refs/heads/main'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Configure Git
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

            - name: Apply version bump
              run: npm run change:version

            - name: Push updated version and tags
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  echo "New version: v$VERSION"
                  git push origin main
                  git tag v$VERSION
                  git push origin v$VERSION
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create GitHub Release
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  echo "Creating GitHub release for v$VERSION"
                  gh release create "v$VERSION" --title "Release $VERSION" --generate-notes
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    deploy:
        name: Deploy to Render
        needs: [release]
        runs-on: ubuntu-latest
        if: |
            always() && 
            needs.release.result == 'success'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Trigger Render Deploy
              env:
                  RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
              run: |
                  echo "Triggering Render Deploy..."
                  if [ -n "$RENDER_DEPLOY_HOOK_URL" ]; then
                    curl -X POST "$RENDER_DEPLOY_HOOK_URL"
                    echo "Deploy hook triggered successfully"
                  else
                    echo "⚠️ RENDER_DEPLOY_HOOK_URL not set. Skipping deployment."
                  fi
